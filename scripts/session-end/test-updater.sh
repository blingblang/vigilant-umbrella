#!/bin/bash

# Test Updater - Updates test files based on session changes
# Tool-agnostic implementation for test maintenance

set -e

# Configuration
PROJECT_ROOT="${PROJECT_ROOT:-$(pwd)}"
CHANGES_JSON="${1:-}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to identify test files needing updates
identify_test_targets() {
    local changed_files=$(echo "$CHANGES_JSON" | jq -r '.changes.modified[]' 2>/dev/null)

    # For each changed file, find corresponding test
    for file in $changed_files; do
        # Check for shell script tests
        if [[ "$file" =~ \.sh$ ]]; then
            local test_file="${file%.sh}.test.sh"
            if [ ! -f "$test_file" ]; then
                echo "CREATE: $test_file"
            else
                echo "UPDATE: $test_file"
            fi
        fi

        # Check for Terraform tests
        if [[ "$file" =~ \.tf$ ]]; then
            local test_dir="$(dirname "$file")/tests"
            if [ ! -d "$test_dir" ]; then
                echo "CREATE_DIR: $test_dir"
            fi
            echo "UPDATE: $test_dir/validate.sh"
        fi
    done
}

# Function to generate basic test template
generate_test_template() {
    local source_file="$1"
    local test_file="$2"

    cat > "$test_file" <<'EOF'
#!/bin/bash

# Test file for: SOURCE_FILE
# Generated by session-end automation

set -e

# Test configuration
SCRIPT_DIR="$(dirname "$0")"
SOURCE_FILE="SOURCE_FILE_PATH"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

# Test function template
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"

    echo -n "Testing: $test_name... "

    if eval "$test_command"; then
        if [ "$expected_result" == "pass" ]; then
            echo -e "${GREEN}PASSED${NC}"
            ((TESTS_PASSED++))
        else
            echo -e "${RED}FAILED${NC} (expected failure)"
            ((TESTS_FAILED++))
        fi
    else
        if [ "$expected_result" == "fail" ]; then
            echo -e "${GREEN}PASSED${NC} (expected failure)"
            ((TESTS_PASSED++))
        else
            echo -e "${RED}FAILED${NC}"
            ((TESTS_FAILED++))
        fi
    fi
}

# Test: Script exists
run_test "Script exists" "[ -f '$SOURCE_FILE' ]" "pass"

# Test: Script is executable
run_test "Script is executable" "[ -x '$SOURCE_FILE' ]" "pass"

# Test: Script has shebang
run_test "Has shebang" "head -1 '$SOURCE_FILE' | grep -q '^#!/'" "pass"

# Add more specific tests here

# Summary
echo ""
echo "Test Summary:"
echo "  Passed: $TESTS_PASSED"
echo "  Failed: $TESTS_FAILED"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}All tests passed!${NC}"
    exit 0
else
    echo -e "${RED}Some tests failed${NC}"
    exit 1
fi
EOF

    # Replace placeholders
    sed -i "s|SOURCE_FILE_PATH|$source_file|g" "$test_file"
    sed -i "s|SOURCE_FILE|$(basename "$source_file")|g" "$test_file"

    chmod +x "$test_file"
}

# Function to update existing test
update_existing_test() {
    local test_file="$1"
    local changes="$2"

    echo -e "${YELLOW}Updating test: $test_file${NC}"

    # Add timestamp comment
    echo "# Last updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ") by session-end automation" >> "$test_file"

    # Check if test needs new cases based on changes
    if echo "$changes" | grep -q "function"; then
        echo "# TODO: Add tests for new functions" >> "$test_file"
    fi

    if echo "$changes" | grep -q "error"; then
        echo "# TODO: Add error handling tests" >> "$test_file"
    fi
}

# Function to create Terraform validation test
create_terraform_test() {
    local tf_dir="$1"
    local test_file="$tf_dir/tests/validate.sh"

    mkdir -p "$tf_dir/tests"

    cat > "$test_file" <<'EOF'
#!/bin/bash

# Terraform validation test
# Generated by session-end automation

set -e

TF_DIR="$(dirname "$(dirname "$0")")"

echo "Validating Terraform configuration in: $TF_DIR"

# Initialize terraform
terraform init -backend=false -chdir="$TF_DIR"

# Validate configuration
if terraform validate -chdir="$TF_DIR"; then
    echo "Terraform validation passed"
    exit 0
else
    echo "Terraform validation failed"
    exit 1
fi
EOF

    chmod +x "$test_file"
}

# Function to create integration test
create_integration_test() {
    local test_file="$PROJECT_ROOT/tests/integration/session-end.test.sh"

    mkdir -p "$PROJECT_ROOT/tests/integration"

    cat > "$test_file" <<'EOF'
#!/bin/bash

# Integration test for session-end changes
# Generated by session-end automation

set -e

PROJECT_ROOT="$(dirname "$(dirname "$(dirname "$0")")")"

echo "Running integration tests..."

# Test: All services are configured
test_services() {
    echo -n "Testing service configurations... "

    if [ -f "$PROJECT_ROOT/docker-compose.yml" ]; then
        docker-compose -f "$PROJECT_ROOT/docker-compose.yml" config > /dev/null 2>&1
        echo "PASSED"
        return 0
    else
        echo "SKIPPED (no docker-compose.yml)"
        return 0
    fi
}

# Test: Monitoring stack validation
test_monitoring() {
    echo -n "Testing monitoring configurations... "

    local errors=0

    # Check Prometheus config
    if [ -f "$PROJECT_ROOT/prometheus/prometheus.yml" ]; then
        # Basic YAML validation
        if ! python3 -c "import yaml; yaml.safe_load(open('$PROJECT_ROOT/prometheus/prometheus.yml'))" 2>/dev/null; then
            ((errors++))
        fi
    fi

    # Check Grafana dashboards
    if [ -d "$PROJECT_ROOT/grafana/dashboards" ]; then
        for dashboard in "$PROJECT_ROOT"/grafana/dashboards/*.json; do
            if [ -f "$dashboard" ]; then
                if ! python3 -m json.tool "$dashboard" > /dev/null 2>&1; then
                    ((errors++))
                fi
            fi
        done
    fi

    if [ $errors -eq 0 ]; then
        echo "PASSED"
        return 0
    else
        echo "FAILED ($errors errors)"
        return 1
    fi
}

# Run tests
test_services
test_monitoring

echo "Integration tests completed"
EOF

    chmod +x "$test_file"
}

# Main execution
main() {
    echo -e "${GREEN}Test Updater Starting${NC}"

    if [ -z "$CHANGES_JSON" ]; then
        echo -e "${RED}No changes JSON provided${NC}"
        exit 1
    fi

    # Identify test targets
    local targets=$(identify_test_targets)

    if [ -z "$targets" ]; then
        echo "No test updates needed"
        return 0
    fi

    # Process each target
    echo "$targets" | while IFS= read -r target; do
        local action=$(echo "$target" | cut -d: -f1)
        local file=$(echo "$target" | cut -d: -f2- | tr -d ' ')

        case "$action" in
            CREATE)
                echo -e "${GREEN}Creating test: $file${NC}"
                source_file="${file%.test.sh}.sh"
                generate_test_template "$source_file" "$file"
                ;;
            UPDATE)
                if [ -f "$file" ]; then
                    update_existing_test "$file" "$CHANGES_JSON"
                fi
                ;;
            CREATE_DIR)
                echo -e "${GREEN}Creating test directory: $file${NC}"
                mkdir -p "$file"
                ;;
        esac
    done

    # Create integration test if significant changes
    local total_changes=$(echo "$CHANGES_JSON" | jq '.changes.modified + .changes.added' 2>/dev/null)
    if [ "$total_changes" -gt 5 ]; then
        echo "Creating integration test due to significant changes"
        create_integration_test
    fi

    echo -e "${GREEN}Test updates completed${NC}"
}

main